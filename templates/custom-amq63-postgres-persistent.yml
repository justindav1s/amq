apiVersion: v1
kind: Template
labels:
  template: custom-amq63-persistent
  xpaas: 1.4.8
message: A new persistent messaging service has been created in your project. It will
  handle the protocol(s) "${MQ_PROTOCOL}". The username/password for accessing the
  service is ${MQ_USERNAME}/${MQ_PASSWORD}.
metadata:
  annotations:
    description: An example JBoss A-MQ application. For more information about using
      this template, see https://github.com/jboss-openshift/application-templates.
    iconClass: icon-amq
    openshift.io/display-name: Custom JBoss A-MQ 6.3 (no SSL)
    openshift.io/provider-display-name: Red Hat, Inc.
    tags: messaging,amq,jboss
    template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-jboss-amq/
    template.openshift.io/long-description: This template defines resources needed
      to develop Red Hat JBoss A-MQ 6.3 based application, including a deployment
      configuration and using persistence.
    template.openshift.io/support-url: https://access.redhat.com
    version: 1.4.8
  creationTimestamp: null
  name: custom-amq63-persistent
objects:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The broker's AMQP port.
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-amq-amqp
  spec:
    ports:
    - port: 5672
      targetPort: 5672
    selector:
      deploymentConfig: ${APPLICATION_NAME}-amq
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The broker's OpenWire port.
      service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-amq-amqp",
        "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-mqtt", "kind": "Service"},{"name":
        "${APPLICATION_NAME}-amq-stomp", "kind": "Service"}]'
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-amq-tcp
  spec:
    ports:
    - port: 61616
      targetPort: 61616
    selector:
      deploymentConfig: ${APPLICATION_NAME}-amq
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Supports node discovery for mesh formation.
      service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
    labels:
      application: ${APPLICATION_NAME}
    name: ${AMQ_MESH_SERVICE_NAME}
  spec:
    clusterIP: None
    ports:
    - name: mesh
      port: 61616
    selector:
      deploymentConfig: ${APPLICATION_NAME}-amq
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-amq
  spec:
    replicas: 1
    selector:
      deploymentConfig: ${APPLICATION_NAME}-amq
    strategy:
      rollingParams:
        maxSurge: 0
      type: Rolling
    template:
      metadata:
        labels:
          application: ${APPLICATION_NAME}
          deploymentConfig: ${APPLICATION_NAME}-amq
        name: ${APPLICATION_NAME}-amq
      spec:
        containers:
        - env:
          - name: AMQ_USER
            value: ${MQ_USERNAME}
          - name: AMQ_PASSWORD
            value: ${MQ_PASSWORD}
          - name: AMQ_TRANSPORTS
            value: ${MQ_PROTOCOL}
          - name: AMQ_QUEUES
            value: ${MQ_QUEUES}
          - name: AMQ_TOPICS
            value: ${MQ_TOPICS}
          - name: MQ_SERIALIZABLE_PACKAGES
            value: ${MQ_SERIALIZABLE_PACKAGES}
          - name: AMQ_MESH_DISCOVERY_TYPE
            value: ${AMQ_MESH_DISCOVERY_TYPE}
          - name: AMQ_MESH_SERVICE_NAME
            value: ${AMQ_MESH_SERVICE_NAME}
          - name: AMQ_MESH_SERVICE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: AMQ_STORAGE_USAGE_LIMIT
            value: ${AMQ_STORAGE_USAGE_LIMIT}
          - name: AMQ_QUEUE_MEMORY_LIMIT
            value: ${AMQ_QUEUE_MEMORY_LIMIT}
          - name: JAVA_OPTS_APPEND
            value: -javaagent:/opt/prometheus/jmx_prometheus_javaagent.jar=9779:/opt/prometheus/prometheus-config.yml
          - name: AMQ_SECRET_CONFIG_DIR
            value: /etc/amq-secret-config-volume
          - name: DB_URL
            value: ${DB_URL}
          - name: DB_USERNAME
            value: ${DB_USERNAME}
          - name: DB_PASSWORD
            value: ${DB_PASSWORD}
          image: ${IMAGE_STREAM}
          imagePullPolicy: Always
          name: ${APPLICATION_NAME}-amq
          ports:
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          - containerPort: 5672
            name: amqp
            protocol: TCP
          - containerPort: 1883
            name: mqtt
            protocol: TCP
          - containerPort: 61613
            name: stomp
            protocol: TCP
          - containerPort: 61616
            name: tcp
            protocol: TCP
          - containerPort: 9779
            name: prometheus
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/bash
              - -c
              - /opt/amq/bin/readinessProbe.sh
        terminationGracePeriodSeconds: 60
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}-amq
        from:
          kind: ImageStreamTag
          name: ${IMAGE_STREAM}:${IMAGE_STREAM_TAG}
          namespace: ${IMAGE_STREAM_NAMESPACE}
      type: ImageChange
    - type: ConfigChange

parameters:
- description: The name for the application.
  displayName: Application Name
  name: APPLICATION_NAME
  required: true
  value: broker
- description: 'Protocols to configure, separated by commas.  Allowed values are:
    `openwire`, `amqp`, `stomp` and `mqtt`.'
  displayName: A-MQ Protocols
  name: MQ_PROTOCOL
  value: openwire
- description: Queue names, separated by commas.  These queues will be automatically
    created when the broker starts.  If left empty, queues will be still created dynamically.
  displayName: Queues
  name: MQ_QUEUES
- description: Topic names, separated by commas.  These topics will be automatically
    created when the broker starts.  If left empty, topics will be still created dynamically.
  displayName: Topics
  name: MQ_TOPICS
- description: List of packages that are allowed to be serialized for use in ObjectMessage,
    separated by commas. If your app doesn't use ObjectMessages, leave this blank.
    This is a security enforcement. For the rationale, see http://activemq.apache.org/objectmessage.html
  displayName: A-MQ Serializable Packages
  name: MQ_SERIALIZABLE_PACKAGES
- description: User name for standard broker user.  It is required for connecting
    to the broker.  If left empty, it will be generated.
  displayName: A-MQ Username
  from: user[a-zA-Z0-9]{3}
  generate: expression
  name: MQ_USERNAME
- description: Password for standard broker user.  It is required for connecting to
    the broker.  If left empty, it will be generated.
  displayName: A-MQ Password
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: MQ_PASSWORD
- description: The discovery agent type to use for discovering mesh endpoints.  'dns'
    will use OpenShift's DNS service to resolve endpoints.  'kube' will use Kubernetes
    REST API to resolve service endpoints.  If using 'kube' the service account for
    the pod must have the 'view' role, which can be added via 'oc policy add-role-to-user
    view system:serviceaccount:<namespace>:default' where <namespace> is the project
    namespace.
  displayName: A-MQ Mesh Discovery Type
  name: AMQ_MESH_DISCOVERY_TYPE
  value: dns
- description: The queue memory limit (default is 1mb)
  displayName: Queue Memory Limit
  name: AMQ_QUEUE_MEMORY_LIMIT
- name: DB_URL
  value: "jdbc:postgresql://postgresql:5432/postgres"
  required: true
- name: DB_USERNAME
  value: "amq"
  required: true
- name: DB_PASSWORD
  value: "amq"
  required: true
- name: IMAGE_STREAM
  value: "custom-amq6"
  required: true
- name: IMAGE_STREAM_TAG
  value: "latest"
  required: true
- name: IMAGE_STREAM_NAMESPACE
  value: "amq"
  required: true
- name: AMQ_MESH_SERVICE_NAME
  value: "amq-mesh"
  required: true
